#!/usr/bin/env python3

from pathlib import Path
from subprocess import PIPE, run
import json

results = {
    "score": 0,
    "tests": []
}


def comp_check() -> bool:
    proc = run(["make"], cwd="/autograder/submission", stdout=PIPE, stderr=PIPE, text=True)
    if proc.returncode == 0:
        results["tests"].append({
            "name": "Compilation check",
            "status": "passed",
            "visibility": "visible",
        })
        results["score"] += 1
        return True
    else:
        results["tests"].append({
            "name": "Compilation check",
            "status": "failed",
            "visibility": "visible",
            "output": f"-- stdout --\n{proc.stdout}\n-- stderr --\n{proc.stderr}",
        })
        return False


def provided_tests():
    for test_path in sorted(Path("/autograder/source/testcases").glob("test*.py")):
        proc = run(["python3", str(test_path.absolute()),
                   "/autograder/submission/main"], cwd="/autograder/submission")
        if proc.returncode == 0:
            results["tests"].append({
                "name": f"Provided testcase: {test_path.name}",
                "status": "passed",
                "visibility": "visible",
            })
            results["score"] += 1
        else:
            results["tests"].append({
                "name": f"Provided testcase: {test_path.name}",
                "status": "failed",
                "visibility": "visible",
            })


def additional_tests():
    for test_path in sorted(Path("/autograder/source/additional").glob("test*.py")):
        proc = run(["python3", str(test_path.absolute()),
                   "/autograder/submission/main"], cwd="/autograder/submission")
        if proc.returncode == 0:
            results["tests"].append({
                "name": f"Hidden testcase: {test_path.name}",
                "status": "passed",
                "visibility": "visible",
            })
            results["score"] += 1
        else:
            results["tests"].append({
                "name": f"Hidden testcase: {test_path.name}",
                "status": "failed",
                "visibility": "visible",
            })


if comp_check():
    provided_tests()
    additional_tests()

with open("/autograder/results/results.json", "w") as f:
    json.dump(results, f)
